<p id="notice"><%= notice %></p>

<h2>Products</h2>

<%= link_to 'Add Product', new_product_path %>

<div class="space_16"></div>

<svg width="600" height="600"></svg>

<script src="https://d3js.org/d3.v4.js"></script>

<script>
var tree = <%=@product_tree.to_json.html_safe%>;

var nodes = [], rels = [];
tree.forEach(res => {
  var pr = {id: res.product.name, label: 'product', size: 10};
  var target = _.findIndex(nodes, pr);
  if (target == -1) {
    nodes.push(pr);
    target = pr;
  } else {
    target = nodes[target];
  }

  res.product.subcategories.forEach(subcategory => {
    var category = {id: subcategory.product.name, label: 'product', size: 10};
    var source = _.findIndex(nodes, category);
    if (source == -1) {
      nodes.push(category);
      source = category;
    } else {
      source = nodes[source];
    }
    //console.log(source, target);
    rels.push({source: source, target: target, strength: 0.1})
  })
});

console.log(nodes.length);
console.log(rels.length);

const width = 960;
const height = 960;
const radius = 6;

const svg = d3.select('svg')
  .attr('width', width)
  .attr('height', height)

const simulation = d3.forceSimulation()
  .force('charge', d3.forceManyBody().strength(-20)) 
  .force('center', d3.forceCenter(width / 2, height / 2))

function getNodeColor(node) {
  return node.size === 1 ? 'red' : 'gray'
}

const dragDrop = d3.drag()
  .on('start', node => {
    node.fx = node.x
    node.fy = node.y
  })
  .on('drag', node => {
    simulation.alphaTarget(0.7).restart()
    node.fx = d3.event.x
    node.fy = d3.event.y
  })
  .on('end', node => {
    if (!d3.event.active) {
      simulation.alphaTarget(0)
    }
    node.fx = null
    node.fy = null
  })


const nodeElements = svg.append('g')
  .selectAll('circle')
  .data(nodes)
  .enter().append('circle')
    .attr('r', 10)
    .attr('fill', getNodeColor)
    .call(dragDrop)
    
const textElements = svg.append('g')
  .selectAll('text')
  .data(nodes)
  .enter().append('text')
    .text(node => node.id)
    .attr('font-size', 15)
    .attr('dx', 15)
    .attr('dy', 4)

var linkElements = svg.append("g")
  .attr("class", "links")
  .selectAll("line")
  .data(rels)
  .enter().append("line")
    .attr("stroke-width", 2)
	  .attr("stroke", "rgba(50, 50, 50, 0.2)")
    
simulation.nodes(nodes).on('tick', () => {
  nodeElements
    .attr('cx', function (node) { return node.x = Math.max(radius, Math.min(width - radius, node.x)); })
    .attr('cy', function (node) { return node.y = Math.max(radius, Math.min(height - radius, node.y)); })
  textElements
    .attr('x', function (node) { return node.x })
    .attr('y', function (node) { return node.y })
  linkElements
    .attr('x1', function (link) { return link.source.x })
    .attr('y1', function (link) { return link.source.y })
    .attr('x2', function (link) { return link.target.x })
    .attr('y2', function (link) { return link.target.y })
})

simulation.force('link', d3.forceLink()
  .id(link => link.strength)
  .strength(link => link.strength))
 
simulation.force('link').links(rels)
</script>

<div class="search_box">
  <%= form_tag products_path, :method => 'get' do %>  
    <%= text_field_tag :search, params[:search], class: "search_field", :id => 'product-autocomplete', :placeholder => "Search" %>
    <%= submit_tag "Find product", :name => nil, class: "search_submit" %>
  <% end %>
</div>
      
<div class="space_16"></div>
<table>
  <thead>
    <tr>
      <th>Product</th>
      <th colspan="2">CO2e per kg</th>
      <th>Studies</th>
    </tr>
  </thead>

  <tbody>
    <% @products.with_associations(:studies, :proxy).each do |product| %>
      <tr>
        <td><%= link_to product.name, product, class: product.reliability_class %></td>
        <td style="background-color:<%= product.co2_equiv_color %>">&nbsp;
        </td>
        <td>
          <%= product.co2_equiv %>
        </td>
        <td>
          <% if product.study_count > 0 %>
            <%= product.study_count %>
          <% else %>
            N/A
            <% if product.proxy %>
              (proxy: <%= link_to product.proxy.name, product.proxy %>)
            <% end %>
          <% end %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

